import logging
import requests
import telebot
from telebot import types
import datetime
from datetime import datetime
import pytz
import schedule
import time
from threading import Thread

bot = telebot.TeleBot('6451388653:AAFL6iG9PqR8-nbLSvDEhMqU5p51IC1XQPQ',threaded=False)
steel_path_missions= []
common_missions = []
mission = []
all_missions = []
cycle = []
events = []
event_info = []
subscribers = {}
notification_schedule={}
def get_events():
    event_info = ""
    events = []
    url = "https://api.warframestat.us/pc/events"
    params = {'language': 'ru', }
    response = requests.get(url,params=params)
    response.headers.get("Content-Type")
    data = response.json()
    for event in data:
        events.append(event)
    for i in range(len(events)):
        end_date = (events[i]['expiry'])
        end_time = datetime.fromisoformat(end_date.replace("Z", "+00:00"))
        current_time = datetime.now(pytz.timezone("Europe/Moscow"))
        time_left = end_time - current_time
        remaining_days = time_left.days
        remaining_hours, remainder = divmod(time_left.seconds, 3600)
        remaining_minutes, _ = divmod(remainder, 60)
        remaining_time = (f"*–î–æ –∫–æ–Ω—Ü–∞ –∏–≤–µ–Ω—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å*:\n–î–Ω–µ–π: {remaining_days} | –ß–∞—Å–æ–≤: {remaining_hours} | –ú–∏–Ω—É—Ç: {remaining_minutes}")
        event_info+=((f"{'-'*70}\n*{events[i]['description']}*\n*–õ–æ–∫–∞—Ü–∏—è: *{events[i]['node']}\n*–ù–∞–≥—Ä–∞–¥–∞: *{events[i]['rewards'][0]['asString']}\n{remaining_time}\n"))
    return event_info


def get_mods(name):

    url = f"https://api.warframestat.us/items/search/{name}"
    params = {'language': 'ru', }
    response = requests.get(url,params=params)
    response.headers.get("Content-Type")
    data = response.json()




def print_data(data, indent=0):
    output = ""  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
    # –í—ã–≤–æ–¥–∏–º 'name', 'description' –∏ 'type' —Å–Ω–∞—á–∞–ª–∞


    if 'name' in data:
        output += "Name: " + data['name'] + "\n"
    if 'description' in data:
        output += "Description: " + data['description'] + "\n"
    if 'type' in data:
        output += "Type: " + data['type'] + "\n"

    if isinstance(data, dict):
        for key, value in data.items():
            if key in ['name', 'description', 'type']:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–≤–æ–¥ 'name', 'description' –∏ 'type', —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω—ã —Ä–∞–Ω–µ–µ
            if isinstance(value, (dict, list)):
                output += " " * indent + key.capitalize() + ":\n"
                output += print_data(value, indent + 2)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é output
            else:
                output += " " * indent + key.capitalize() + ": " + str(value) + "\n"
    elif isinstance(data, list):
        for item in data:
            if isinstance(item, dict):
                output += print_data(item, indent)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é output
    return output  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–º–µ—Å—Ç–æ –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω


def get_item(message):
    msg = message
    name = message.text
    if name.lower() == '–Ω–∞–∑–∞–¥':
        get_text_messages(message)
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(btn1)
    url = f"https://api.warframestat.us/items/{name}"
    params = {'only':["name,description,attacks,type"],'language':'ru',}
    response = requests.get(url,params=params)
    response.headers.get("Content-Type")
    data = response.json()
    items = print_data(data)
    bot.send_message(msg.from_user.id, items, reply_markup=markup )
    bot.register_next_step_handler(message, get_item)
    return items


def get_rivens():
    url = "https://api.warframestat.us/pc/rivens/search/Corvas"
    response = requests.get(url)
    response.headers.get("Content-Type")
    data = response.json()


def get_voidTrader():
    url = "https://api.warframestat.us/pc/ru/voidTrader"
    response = requests.get(url)
    response.headers.get("Content-Type")
    data = response.json()
    items = ''

    if data['active'] == True:
        for item_data in data['inventory']:
            item_name = item_data['item']
            ducats_value = item_data['ducats']
            credits_value = item_data['credits']
            items += f"*{'-'*50}\n–ü—Ä–µ–¥–º–µ—Ç:* {item_name}\n*–î—É–∫–∞—Ç—ã*: {ducats_value}\n*–ö—Ä–µ–¥–∏—Ç—ã*: {credits_value}\n"

        voidTrader = (f"*–õ–æ–∫–∞—Ü–∏—è:* {data['location']}\n\n{items}")
    else:
        voidTrader = (f"–ë–∞—Ä–æ –ö–∏—Ç–∏—Ä –ø—Ä–∏–±—É–¥–µ—Ç —á–µ—Ä–µ–∑: *{data['startString']}*\n–õ–æ–∫–∞—Ü–∏—è: *{data['location']}*")
    return voidTrader


def get_arbitration():
    url = "https://api.warframestat.us/pc/ru/arbitration"
    response = requests.get(url)
    response.headers.get("Content-Type")
    data = response.json()

    end_date = (data['expiry'])
    end_time = datetime.fromisoformat(end_date.replace("Z", "+00:00"))
    current_time = datetime.now(pytz.timezone("Europe/Moscow"))
    time_left = end_time - current_time
    remaining_days = time_left.days
    remaining_hours, remainder = divmod(time_left.seconds, 3600)
    remaining_minutes, _ = divmod(remainder, 60)
    remaining_time = (f"*–î–æ –∫–æ–Ω—Ü–∞ –æ—Å—Ç–∞–ª–æ—Å—å:*\n–î–Ω–µ–π: {remaining_days} | –ß–∞—Å–æ–≤: {remaining_hours} | –ú–∏–Ω—É—Ç: {remaining_minutes}")
    arbitration = (f"*{data['type']}*\n{data['node']}\n{data['enemy']}\n{remaining_time}")
    return arbitration


def get_worldstate_data():
    cycle =''
    cycle +=get_vallisCycle()
    cycle +=get_cambionCycle()
    cycle += get_cetusCycle()
    return cycle

def get_vallisCycle():
    url = "https://api.warframestat.us/pc/ru/vallisCycle"
    response = requests.get(url)
    response.headers.get("Content-Type")
    data = response.json()
    if data['state'] == "cold":
        data['state'] = "–•–æ–ª–æ–¥"
    else:
        data['state'] = "–¢–µ–ø–ª–æ"
    vallis_cycle = (f"{'-'*50}\n*–î–æ–ª–∏–Ω–∞ —Å—Ñ–µ—Ä:* {data['state']}\n*–û—Å—Ç–∞–ª–æ—Å—å:* {data['timeLeft']}\n")
    return vallis_cycle

def get_cetusCycle():
    url = "https://api.warframestat.us/pc/ru/cetusCycle"
    response = requests.get(url)
    response.headers.get("Content-Type")
    data = response.json()
    if data['state'] == "night":
        data['state'] = "–ù–æ—á—å"
    else:
        data['state'] = "–î–µ–Ω—å"
    cetus_cycle = ( f"{'-'*50}\n*–¶–µ—Ç—É—Å:* {data['state']}*\n–û—Å—Ç–∞–ª–æ—Å—å: *{data['timeLeft']}\n")

    return cetus_cycle


def get_cambionCycle():
    url = "https://api.warframestat.us/pc/ru/cambionCycle"
    response = requests.get(url)
    response.headers.get("Content-Type")
    data = response.json()
    if data['state'] == "vome":
        data['state'] = "–í–æ—É–º"
    else:
        data['state'] = "–§—ç–∑"
    cambion_cycle = (f"{'-'*50}\n*–ö–∞–º–±–∏–æ–Ω—Å–∫–∏–π –¥—Ä–µ–π—Ñ:* {data['state']}\n*–û—Å—Ç–∞–ª–æ—Å—å:* {data['timeLeft']}\n")

    return cambion_cycle

def get_steel_path__reward():
    url = "https://api.warframestat.us/pc/ru/steelPath"
    response = requests.get(url)
    response.headers.get("Content-Type")
    data = response.json()
    steel_path_reward = (f"*{data['currentReward']['name']}*\n*–°—Ç–æ–∏–º–æ—Å—Ç—å*: {data['currentReward']['cost']} —Å—Ç–∞–ª–∏\n")
    return steel_path_reward


def get_dat(mode):
    url = "https://api.warframestat.us//pc/ru/fissures"
    response = requests.get(url)
    response.headers.get("Content-Type")
    data = response.json()
    mission = []
    steel_missions = ""
    common_missions = ""
    for item in data:
        mission.append((item))
    len_mission = len(mission)
    steel_iteration = 0
    common_iteration = 0
    for i in range(len_mission):
        if mission[i]['isHard'] == True:
            steel_missions += f"*{'-' * 30}\n{mission[i]['missionType']}*\n{mission[i]['tier']}\n{mission[i]['eta']}\n{mission[i]['node']}\n{mission[i]['enemyKey']}\n"
            steel_iteration += 1
        else:
            common_missions += f"*{'-' * 30}\n{mission[i]['missionType']}*\n{mission[i]['tier']}\n{mission[i]['eta']}\n{mission[i]['node']}\n{mission[i]['enemyKey']}\n"
            common_iteration +=1
    if mode == "C—Ç–∞–ª—å–Ω–æ–π –ø—É—Ç—å":
        return  steel_missions
    else:
        return common_missions
f'-'
@bot.message_handler(commands=['start'])
def start(message):

    btn1 = types.KeyboardButton("–†–∞–∑—Ä—ã–≤—ã –±–µ–∑–¥–Ω—ã")
    btn2 = types.KeyboardButton("üåë –¶–∏–∫–ª—ã –º–∏—Ä–∞ üåû")
    btn3 = types.KeyboardButton("–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —Å—Ç–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏")
    btn4 = types.KeyboardButton("–¢–æ–≤–∞—Ä—ã –ë–∞—Ä–æ –ö–∏—Ç–∏—Ä–∞")
    btn5 = types.KeyboardButton("–ù–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç")
    btn6 = types.KeyboardButton("–¢–µ–∫—É—â–∏–µ –∏–≤–µ–Ω—Ç—ã")
    btn7 = types.KeyboardButton("–ê—Ä–±–∏—Ç—Ä–∞–∂")
    if message.chat.id in subscribers:
        btn8 = types.KeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    else:
        btn8 = types.KeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,row_width=2)
    markup.add(btn1,btn2,btn3,btn4,btn5,btn6,btn7,btn8)
    bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç,—è –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–≥—Ä—ã Warframe", reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):

    if message.text == "üåë –¶–∏–∫–ª—ã –º–∏—Ä–∞ üåû":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        btn1 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(btn1)
        data = get_worldstate_data()
        bot.send_message(message.from_user.id,data , reply_markup=markup,parse_mode="Markdown")

    if message.text =="–†–∞–∑—Ä—ã–≤—ã –±–µ–∑–¥–Ω—ã":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn2 = types.KeyboardButton("C—Ç–∞–ª—å–Ω–æ–π –ø—É—Ç—å")
        btn3 = types.KeyboardButton("–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º")
        markup.add(btn2,btn3)
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º", reply_markup=markup)

    if message.text == "C—Ç–∞–ª—å–Ω–æ–π –ø—É—Ç—å":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn4 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(btn4)
        data = get_dat(message.text)
        bot.send_message(message.from_user.id, data,reply_markup=markup,parse_mode="Markdown")

    if message.text == "–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn4 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(btn4)
        data = get_dat(message.text)
        bot.send_message(message.from_user.id, data,reply_markup=markup,parse_mode="Markdown")

    if message.text =="–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —Å—Ç–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(btn1)
        data = get_steel_path__reward()
        bot.send_message(message.from_user.id, data, reply_markup=markup,parse_mode="Markdown")


    if message.text == "–ù–∞–∑–∞–¥":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True,row_width=2)
        btn1 = types.KeyboardButton("üåë –¶–∏–∫–ª—ã –º–∏—Ä–∞ üåû")
        btn2 = types.KeyboardButton("–†–∞–∑—Ä—ã–≤—ã –±–µ–∑–¥–Ω—ã")
        btn3 = types.KeyboardButton("–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —Å—Ç–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏")
        btn4 = types.KeyboardButton("–¢–æ–≤–∞—Ä—ã –ë–∞—Ä–æ –ö–∏—Ç–∏—Ä–∞")
        btn5 = types.KeyboardButton("–ù–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç")
        btn6 = types.KeyboardButton("–¢–µ–∫—É—â–∏–µ –∏–≤–µ–Ω—Ç—ã")
        btn7 = types.KeyboardButton("–ê—Ä–±–∏—Ç—Ä–∞–∂")
        if message.chat.id in subscribers:
            btn8 = types.KeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        else:
            btn8 = types.KeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        markup.add(btn1,btn2, btn3,btn4,btn5,btn6,btn7,btn8)
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º", reply_markup=markup)

    if message.text == "–¢–æ–≤–∞—Ä—ã –ë–∞—Ä–æ –ö–∏—Ç–∏—Ä–∞":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(btn1)
        data = get_voidTrader()
        bot.send_message(message.from_user.id, data, reply_markup=markup,parse_mode="Markdown")

    if message.text == "–ù–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(btn1)
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞", reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message,get_item)

    if message.text == "–¢–µ–∫—É—â–∏–µ –∏–≤–µ–Ω—Ç—ã":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(btn1)
        data = get_events()
        bot.send_message(message.from_user.id, data, reply_markup=markup, parse_mode="Markdown")

    if message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(btn1)
        data = get_arbitration()
        bot.send_message(message.from_user.id, data, reply_markup=markup, parse_mode="Markdown")

    if message.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(btn1)
        bot.send_message(message.from_user.id,'–í—ã –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑—Ä—ã–≤–∞—Ö –±–µ–∑–¥–Ω—ã —Å—Ç–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏.\n\n–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç–∞—Ö' , reply_markup=markup,parse_mode="Markdown")
        bot.register_next_step_handler(message, set_notification_interval)

    if message.text == "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(btn1)
        bot.send_message(message.chat.id, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", reply_markup=markup)
        if message.chat.id in subscribers:
            del subscribers[message.chat.id]
            del notification_schedule[message.chat.id]

def set_notification_interval(message):
    chat_id = message.chat.id
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        get_text_messages(message)
        return
    try:
        minutes = int(message.text)
        if minutes <= 0 or minutes>  720:
            bot.send_message(chat_id, "–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –Ω–µ –±–æ–ª–µ–µ 720 –º–∏–Ω—É—Ç.–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            bot.register_next_step_handler(message, set_notification_interval)
            return
        subscribers[message.chat.id] = True
        notification_schedule[chat_id] = minutes
        bot.send_message(chat_id, f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")
        schedule.clear(tag=chat_id)
        schedule_notification(chat_id, minutes)
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, set_notification_interval)


def schedule_notification(chat_id, minutes):
    schedule.every(minutes).minutes.do(send_notification, chat_id).tag(chat_id)

def send_notification(chat_id):
    if chat_id in subscribers:
        data = get_dat("C—Ç–∞–ª—å–Ω–æ–π –ø—É—Ç—å")
        bot.send_message(chat_id, data, parse_mode="Markdown")

def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    while 1:
        try:
            schedule_thread = Thread(target=run_schedule)
            schedule_thread.start()
            bot.infinity_polling()
        except Exception:
            logging.basicConfig(level=logging.ERROR, filename="py_log.log", filemode="w")
            time.sleep(5)
            


